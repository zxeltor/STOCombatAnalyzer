//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace zxeltor.StoCombat.Analyzer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("zxeltor.StoCombat.Analyzer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This displays the raw STO combat log data for the selected combat. By default, not all data columns from the combat log are displayed. You can enable/disable the columns in the display by right clicking on the datagrid and interacting with the context menu that’s displayed.
        ///
        ///Notes:
        ///1) If you choose to use the Search field for filtering, keep in mind it will only filters on string based columns.
        ///2) Keep in mind this shows the raw data from the combat logs..
        /// </summary>
        public static string all_combat_events_datagrid {
            get {
                return ResourceManager.GetString("all_combat_events_datagrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to STO Combat Log Analyzer.
        /// </summary>
        public static string ApplicationName {
            get {
                return ResourceManager.GetString("ApplicationName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revert to the previous map detection settings, if any are available.
        ///
        ///Note: The new settings won&apos;t be reflected in the interface until you run &quot;Parse Log(s)&quot;..
        /// </summary>
        public static string cancel_detection_settings_changes {
            get {
                return ResourceManager.GetString("cancel_detection_settings_changes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This section allows you to parse the combat logs, and examine a selected combat instance. The data here is meant to assist you in making modifications to the CombatMapEntityList section..
        /// </summary>
        public static string combat_analysis {
            get {
                return ResourceManager.GetString("combat_analysis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a breakdown of event types for the selected Player. If you click on a particular bar, the DataGrid and Magnitude Plot will update with more specific data for the selected event type..
        /// </summary>
        public static string combat_event_type_breakdown {
            get {
                return ResourceManager.GetString("combat_event_type_breakdown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This displays the raw STO combat log data for the selected event type. By default, not all data columns from the combat log are displayed. You can enable/disable the columns in the display by right clicking on the datagrid and interacting with the context menu that’s displayed.
        ///
        ///Notes:
        ///1) If you choose to use the Search field for filtering, keep in mind it will only filter on columns which are visible.
        ///2) Keep in mind this shows the raw data from the combat logs..
        /// </summary>
        public static string combat_events_datagrid {
            get {
                return ResourceManager.GetString("combat_events_datagrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a scatter plot of the Magnitude data vs. time for the selected event type. You can use the control to switch between the various groupings of event types. You can also display the MagnitudeBase data on the grid if selected.
        ///
        ///Note: Keep in mind this shows the raw data from the combat logs..
        /// </summary>
        public static string combat_events_scatterplot {
            get {
                return ResourceManager.GetString("combat_events_scatterplot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy Unique Entities into a CombatMap..
        /// </summary>
        public static string copy_unique_entities_tomap {
            get {
                return ResourceManager.GetString("copy_unique_entities_tomap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to export the currently selected Combat entity to a JSON file. The JSON is primarily used for troubleshooting purposes.
        ///
        ///Note: A Combat entity needs to be selected in the &quot;Log File Analyzer&quot; tab for this to work..
        /// </summary>
        public static string export_combat_json {
            get {
                return ResourceManager.GetString("export_combat_json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export map detection settings to a JSON file with indentation..
        /// </summary>
        public static string export_detection_json {
            get {
                return ResourceManager.GetString("export_detection_json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export map detection settings to a JSON file without indentation..
        /// </summary>
        public static string export_detection_json_no_indents {
            get {
                return ResourceManager.GetString("export_detection_json_no_indents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/zxeltor/STOCombatAnalyzer/wiki/Application-Tab:-Combat-Analyzer.
        /// </summary>
        public static string GithubCombatAnalyzerSectionOfWikiUrl {
            get {
                return ResourceManager.GetString("GithubCombatAnalyzerSectionOfWikiUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/zxeltor/STOCombatAnalyzer/wiki/Application-Tab:-Map-Event-Detection-Settings.
        /// </summary>
        public static string GithubMapDetectionSectionOfWikiUrl {
            get {
                return ResourceManager.GetString("GithubMapDetectionSectionOfWikiUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/zxeltor/STOCombatAnalyzer.Settings.
        /// </summary>
        public static string GithubMapDetectRepoUrl {
            get {
                return ResourceManager.GetString("GithubMapDetectRepoUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/zxeltor/STOCombatAnalyzer.
        /// </summary>
        public static string GithubRepoUrl {
            get {
                return ResourceManager.GetString("GithubRepoUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/zxeltor/STOCombatAnalyzer/wiki.
        /// </summary>
        public static string GithubRepoWikiUrl {
            get {
                return ResourceManager.GetString("GithubRepoWikiUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/zxeltor/STOCombatAnalyzer/wiki/Application-Tab:-Tools-Settings.
        /// </summary>
        public static string GithubSettingsSectionOfWikiUrl {
            get {
                return ResourceManager.GetString("GithubSettingsSectionOfWikiUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import a new or modified CombatMapDetectionSettings.json file. These settings affect how a map is determined for a Combat entity.
        ///
        ///Note: The new settings won&apos;t be reflected in the interface until you run &quot;Parse Log(s)&quot;..
        /// </summary>
        public static string import_detection_json {
            get {
                return ResourceManager.GetString("import_detection_json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download and import the latest CombatMapDetectionSettings.json file from the offical site.
        ///
        ///These settings affect how a map is determined for a Combat entity.
        ///
        ///Note: The new settings won&apos;t be reflected in the interface until you run &quot;Parse Log(s)&quot;..
        /// </summary>
        public static string import_detection_json_from_url {
            get {
                return ResourceManager.GetString("import_detection_json_from_url", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display the Events(s) DataGrid and the Event(s) Magnitude Plot..
        /// </summary>
        public static string is_display_analysis_tools {
            get {
                return ResourceManager.GetString("is_display_analysis_tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If selected, display a breakdown of Pet Only events in the Event Type Breakdown barchart..
        /// </summary>
        public static string is_display_pets_only {
            get {
                return ResourceManager.GetString("is_display_pets_only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This displays a collection of configurable map entities. A map can represent a physical map, a TFO, or some other event in the game..
        /// </summary>
        public static string map_entity_list {
            get {
                return ResourceManager.GetString("map_entity_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://raw.githubusercontent.com/zxeltor/STOCombatAnalyzer.Settings/main/CombatMapDetectionSettings.json.
        /// </summary>
        public static string MapDetctionSettingsDownloadUrl {
            get {
                return ResourceManager.GetString("MapDetctionSettingsDownloadUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to import and parse one or multiple Combat entities from JSON file(s)..
        /// </summary>
        public static string parse_combat_json {
            get {
                return ResourceManager.GetString("parse_combat_json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to import and parse one or multiple STO Combat log file(s)..
        /// </summary>
        public static string parse_sto_combat_file {
            get {
                return ResourceManager.GetString("parse_sto_combat_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a Player is selected here, the rest of the controls in the UI update with information for the selected Player..
        /// </summary>
        public static string player_select {
            get {
                return ResourceManager.GetString("player_select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset map detection settings to application default.
        ///
        ///Note: The new settings won&apos;t be reflected in the interface until you run &quot;Parse Log(s)&quot;..
        /// </summary>
        public static string reset_detection_json {
            get {
                return ResourceManager.GetString("reset_detection_json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save the current map detection settings, and use them as your default in the application..
        /// </summary>
        public static string save_detection_settings {
            get {
                return ResourceManager.GetString("save_detection_settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This section displays a list of player entities for the currently selected combat instance.
        ///
        ///Note: This is a non-selectable list. This is here for informational purposes only..
        /// </summary>
        public static string selected_combat_players_list {
            get {
                return ResourceManager.GetString("selected_combat_players_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This section displays a list of unique non-player entities, and their pets. The “Entity Label” and “Entity Id” fields of an entry, can be added as a MapEntity or MapEntityExclusion in the CombatMapEntityList section. These entities are used to improve map/event detection when parsing the combat logs..
        /// </summary>
        public static string selected_combat_unique_list {
            get {
                return ResourceManager.GetString("selected_combat_unique_list", resourceCulture);
            }
        }
    }
}
