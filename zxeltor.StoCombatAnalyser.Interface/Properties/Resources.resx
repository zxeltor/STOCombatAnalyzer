<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationName" xml:space="preserve">
    <value>STO Combat Log Analyzer</value>
  </data>
  <data name="combat_analysis" xml:space="preserve">
    <value>This section allows you to parse the combat logs, and examine a selected combat instance. The data here is meant to assist you in making modifications to the CombatMapEntityList section.</value>
  </data>
  <data name="combat_events_datagrid" xml:space="preserve">
    <value>This displays the raw STO combat log data for the selected event type. By default, not all data columns from the combat log are displayed. You can enable/disable the columns in the display by right clicking on the datagrid and interacting with the context menu that’s displayed.

Notes:
1) If you choose to use the Search field for filtering, keep in mind it will only filter on columns which are visible.
2) Keep in mind this shows the raw data from the combat logs.</value>
  </data>
  <data name="combat_events_scatterplot" xml:space="preserve">
    <value>This is a scatter plot of the Magnitude data vs. time for the selected event type. You can use the control to switch between the various groupings of event types. You can also display the MagnitudeBase data on the grid if selected.

Note: Keep in mind this shows the raw data from the combat logs.</value>
  </data>
  <data name="combat_event_type_breakdown" xml:space="preserve">
    <value>This is a breakdown of event types for the selected Player. If you click on a particular bar, the DataGrid and Magnitude Plot will update with more specific data for the selected event type.</value>
  </data>
  <data name="export_combat_json" xml:space="preserve">
    <value>Used to export the currently selected Combat entity to a JSON file. The JSON is primarily used for troubleshooting purposes.

Note: A Combat entity needs to be selected in the "Log File Analyzer" tab for this to work.</value>
  </data>
  <data name="export_detection_json" xml:space="preserve">
    <value>Export map detection settings to a JSON file with indentation.</value>
  </data>
  <data name="export_detection_json_no_indents" xml:space="preserve">
    <value>Export map detection settings to a JSON file without indentation.</value>
  </data>
  <data name="GithubMapDetectionSectionOfWikiUrl" xml:space="preserve">
    <value>https://github.com/zxeltor/STOCombatAnalyzer/wiki/Map-Detection</value>
  </data>
  <data name="GithubMapDetectRepoUrl" xml:space="preserve">
    <value>https://github.com/zxeltor/STOCombatAnalyzer.Settings</value>
  </data>
  <data name="GithubMapSettingsSectionOfWikiUrl" xml:space="preserve">
    <value>https://github.com/zxeltor/STOCombatAnalyzer/wiki/Application-Tab:-Tools-Settings</value>
  </data>
  <data name="GithubRepoUrl" xml:space="preserve">
    <value>https://github.com/zxeltor/STOCombatAnalyzer</value>
  </data>
  <data name="GithubRepoWikiUrl" xml:space="preserve">
    <value>https://github.com/zxeltor/STOCombatAnalyzer/wiki</value>
  </data>
  <data name="import_detection_json" xml:space="preserve">
    <value>Import a new or modified CombatMapDetectionSettings.json file. These settings affect how a map is determined for a Combat entity.

Note: The new settings won't be reflected in the interface until you run "Parse Log(s)".</value>
  </data>
  <data name="import_detection_json_from_url" xml:space="preserve">
    <value>Download and import the latest CombatMapDetectionSettings.json file from the offical site.

These settings affect how a map is determined for a Combat entity.

Note: The new settings won't be reflected in the interface until you run "Parse Log(s)".</value>
  </data>
  <data name="is_display_analysis_tools" xml:space="preserve">
    <value>Display the Events(s) DataGrid and the Event(s) Magnitude Plot.</value>
  </data>
  <data name="is_display_pets_only" xml:space="preserve">
    <value>If selected, display a breakdown of Pet Only events in the Event Type Breakdown barchart.</value>
  </data>
  <data name="map_entity_list" xml:space="preserve">
    <value>This displays a collection of configurable map entities. A map can represent a physical map, a TFO, or some other event in the game.</value>
  </data>
  <data name="player_select" xml:space="preserve">
    <value>When a Player is selected here, the rest of the controls in the UI update with information for the selected Player.</value>
  </data>
  <data name="reset_detection_json" xml:space="preserve">
    <value>Reset map detection settings to application default.

Note: The new settings won't be reflected in the interface until you run "Parse Log(s)".</value>
  </data>
  <data name="selected_combat_unique_list" xml:space="preserve">
    <value>This section displays a list of unique non-player entities, and their pets. The Label and Id of each entry, can be added as a MapEntity or MapEntityExclusion, to a map in the CombatMapEntityList section.</value>
  </data>
</root>